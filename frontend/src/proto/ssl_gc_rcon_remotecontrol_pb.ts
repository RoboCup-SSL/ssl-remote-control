// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file ssl_gc_rcon_remotecontrol.proto (syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Team } from "./ssl_gc_common_pb";
import { file_ssl_gc_common } from "./ssl_gc_common_pb";
import type { ControllerReply, Signature } from "./ssl_gc_rcon_pb";
import { file_ssl_gc_rcon } from "./ssl_gc_rcon_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file ssl_gc_rcon_remotecontrol.proto.
 */
export const file_ssl_gc_rcon_remotecontrol: GenFile = /*@__PURE__*/
  fileDesc("Ch9zc2xfZ2NfcmNvbl9yZW1vdGVjb250cm9sLnByb3RvIk8KGVJlbW90ZUNvbnRyb2xSZWdpc3RyYXRpb24SEwoEdGVhbRgBIAIoDjIFLlRlYW0SHQoJc2lnbmF0dXJlGAIgASgLMgouU2lnbmF0dXJlItUCChlSZW1vdGVDb250cm9sVG9Db250cm9sbGVyEh0KCXNpZ25hdHVyZRgBIAEoCzIKLlNpZ25hdHVyZRI1CgdyZXF1ZXN0GAIgASgOMiIuUmVtb3RlQ29udHJvbFRvQ29udHJvbGxlci5SZXF1ZXN0SAASGAoOZGVzaXJlZF9rZWVwZXIYAyABKAVIABIkChpyZXF1ZXN0X3JvYm90X3N1YnN0aXR1dGlvbhgEIAEoCEgAEhkKD3JlcXVlc3RfdGltZW91dBgFIAEoCEgAEiAKFnJlcXVlc3RfZW1lcmdlbmN5X3N0b3AYBiABKAhIACJeCgdSZXF1ZXN0EgsKB1VOS05PV04QABIICgRQSU5HEAESEgoOQ0hBTExFTkdFX0ZMQUcQAhIQCgxTVE9QX1RJTUVPVVQQAxIWChJGQUlMX0JBTExQTEFDRU1FTlQQBEIFCgNtc2cibwoZQ29udHJvbGxlclRvUmVtb3RlQ29udHJvbBIqChBjb250cm9sbGVyX3JlcGx5GAEgASgLMhAuQ29udHJvbGxlclJlcGx5EiYKBXN0YXRlGAIgASgLMhcuUmVtb3RlQ29udHJvbFRlYW1TdGF0ZSK/AwoWUmVtb3RlQ29udHJvbFRlYW1TdGF0ZRITCgR0ZWFtGAwgASgOMgUuVGVhbRI1ChJhdmFpbGFibGVfcmVxdWVzdHMYASADKA4yGS5SZW1vdGVDb250cm9sUmVxdWVzdFR5cGUSMgoPYWN0aXZlX3JlcXVlc3RzGAIgAygOMhkuUmVtb3RlQ29udHJvbFJlcXVlc3RUeXBlEhEKCWtlZXBlcl9pZBgDIAEoBRIZChFlbWVyZ2VuY3lfc3RvcF9pbhgEIAEoAhIVCg10aW1lb3V0c19sZWZ0GAUgASgFEhkKEXRpbWVvdXRfdGltZV9sZWZ0GAogASgCEhwKFGNoYWxsZW5nZV9mbGFnc19sZWZ0GAYgASgFEhIKCm1heF9yb2JvdHMYByABKAUSFwoPcm9ib3RzX29uX2ZpZWxkGAkgASgFEhgKEHllbGxvd19jYXJkc19kdWUYCCADKAISHAoUY2FuX3N1YnN0aXR1dGVfcm9ib3QYCyABKAgSHgoWYm90X3N1YnN0aXR1dGlvbnNfbGVmdBgNIAEoDRIiChpib3Rfc3Vic3RpdHV0aW9uX3RpbWVfbGVmdBgOIAEoAirBAQoYUmVtb3RlQ29udHJvbFJlcXVlc3RUeXBlEhgKFFVOS05PV05fUkVRVUVTVF9UWVBFEAASEgoORU1FUkdFTkNZX1NUT1AQARIWChJST0JPVF9TVUJTVElUVVRJT04QAhILCgdUSU1FT1VUEAMSEgoOQ0hBTExFTkdFX0ZMQUcQBBIUChBDSEFOR0VfS0VFUEVSX0lEEAUSEAoMU1RPUF9USU1FT1VUEAYSFgoSRkFJTF9CQUxMUExBQ0VNRU5UEAdCWEIbU3NsR2NSY29uUmVtb3RlY29udHJvbFByb3RvUAFaN2dpdGh1Yi5jb20vUm9ib0N1cC1TU0wvc3NsLXJlbW90ZS1jb250cm9sL2ludGVybmFsL3Jjb24", [file_ssl_gc_common, file_ssl_gc_rcon]);

/**
 * a registration that must be send by the remote control to the controller as the very first message
 *
 * @generated from message RemoteControlRegistration
 */
export type RemoteControlRegistration = Message<"RemoteControlRegistration"> & {
  /**
   * the team to be controlled
   *
   * @generated from field: required Team team = 1;
   */
  team: Team;

  /**
   * signature can optionally be specified to enable secure communication
   *
   * @generated from field: optional Signature signature = 2;
   */
  signature?: Signature;
};

/**
 * Describes the message RemoteControlRegistration.
 * Use `create(RemoteControlRegistrationSchema)` to create a new message.
 */
export const RemoteControlRegistrationSchema: GenMessage<RemoteControlRegistration> = /*@__PURE__*/
  messageDesc(file_ssl_gc_rcon_remotecontrol, 0);

/**
 * wrapper for all messages from the remote control to the controller
 *
 * @generated from message RemoteControlToController
 */
export type RemoteControlToController = Message<"RemoteControlToController"> & {
  /**
   * signature can optionally be specified to enable secure communication
   *
   * @generated from field: optional Signature signature = 1;
   */
  signature?: Signature;

  /**
   * @generated from oneof RemoteControlToController.msg
   */
  msg: {
    /**
     * send a request to the GC
     *
     * @generated from field: RemoteControlToController.Request request = 2;
     */
    value: RemoteControlToController_Request;
    case: "request";
  } | {
    /**
     * request a new desired keeper id
     *
     * @generated from field: int32 desired_keeper = 3;
     */
    value: number;
    case: "desiredKeeper";
  } | {
    /**
     * true: request to substitute a robot at the next possibility
     * false: cancel request
     *
     * @generated from field: bool request_robot_substitution = 4;
     */
    value: boolean;
    case: "requestRobotSubstitution";
  } | {
    /**
     * true: request a timeout with the next stoppage
     * false: cancel the request
     *
     * @generated from field: bool request_timeout = 5;
     */
    value: boolean;
    case: "requestTimeout";
  } | {
    /**
     * true: initiate an emergency stop
     * false: cancel the request
     *
     * @generated from field: bool request_emergency_stop = 6;
     */
    value: boolean;
    case: "requestEmergencyStop";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message RemoteControlToController.
 * Use `create(RemoteControlToControllerSchema)` to create a new message.
 */
export const RemoteControlToControllerSchema: GenMessage<RemoteControlToController> = /*@__PURE__*/
  messageDesc(file_ssl_gc_rcon_remotecontrol, 1);

/**
 * @generated from enum RemoteControlToController.Request
 */
export enum RemoteControlToController_Request {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Ping the GC to test the connection. The GC will respond with OK and the current team state
   *
   * @generated from enum value: PING = 1;
   */
  PING = 1,

  /**
   * Raise a challenge flag (this is not revocable)
   *
   * @generated from enum value: CHALLENGE_FLAG = 2;
   */
  CHALLENGE_FLAG = 2,

  /**
   * Stop an ongoing timeout
   *
   * @generated from enum value: STOP_TIMEOUT = 3;
   */
  STOP_TIMEOUT = 3,

  /**
   * Fail a ball placement
   *
   * @generated from enum value: FAIL_BALLPLACEMENT = 4;
   */
  FAIL_BALLPLACEMENT = 4,
}

/**
 * Describes the enum RemoteControlToController.Request.
 */
export const RemoteControlToController_RequestSchema: GenEnum<RemoteControlToController_Request> = /*@__PURE__*/
  enumDesc(file_ssl_gc_rcon_remotecontrol, 1, 0);

/**
 * wrapper for all messages from controller to a team's computer
 *
 * @generated from message ControllerToRemoteControl
 */
export type ControllerToRemoteControl = Message<"ControllerToRemoteControl"> & {
  /**
   * a reply from the controller
   *
   * @generated from field: optional ControllerReply controller_reply = 1;
   */
  controllerReply?: ControllerReply;

  /**
   * current team state
   *
   * @generated from field: optional RemoteControlTeamState state = 2;
   */
  state?: RemoteControlTeamState;
};

/**
 * Describes the message ControllerToRemoteControl.
 * Use `create(ControllerToRemoteControlSchema)` to create a new message.
 */
export const ControllerToRemoteControlSchema: GenMessage<ControllerToRemoteControl> = /*@__PURE__*/
  messageDesc(file_ssl_gc_rcon_remotecontrol, 2);

/**
 * Current team state from Controller for remote control
 *
 * @generated from message RemoteControlTeamState
 */
export type RemoteControlTeamState = Message<"RemoteControlTeamState"> & {
  /**
   * the team that is controlled
   *
   * @generated from field: optional Team team = 12;
   */
  team: Team;

  /**
   * list of all currently available request types that can be made
   *
   * @generated from field: repeated RemoteControlRequestType available_requests = 1;
   */
  availableRequests: RemoteControlRequestType[];

  /**
   * list of all currently active request types that are pending
   *
   * @generated from field: repeated RemoteControlRequestType active_requests = 2;
   */
  activeRequests: RemoteControlRequestType[];

  /**
   * currently set keeper id
   *
   * @generated from field: optional int32 keeper_id = 3;
   */
  keeperId: number;

  /**
   * number of seconds till emergency stop is executed
   * zero, if no emergency stop requested
   *
   * @generated from field: optional float emergency_stop_in = 4;
   */
  emergencyStopIn: number;

  /**
   * number of timeouts left for the team
   *
   * @generated from field: optional int32 timeouts_left = 5;
   */
  timeoutsLeft: number;

  /**
   * number of seconds left for timeout for the team
   *
   * @generated from field: optional float timeout_time_left = 10;
   */
  timeoutTimeLeft: number;

  /**
   * number of challenge flags left for the team
   *
   * @generated from field: optional int32 challenge_flags_left = 6;
   */
  challengeFlagsLeft: number;

  /**
   * max number of robots currently allowed
   *
   * @generated from field: optional int32 max_robots = 7;
   */
  maxRobots: number;

  /**
   * current number of robots visible on field
   *
   * @generated from field: optional int32 robots_on_field = 9;
   */
  robotsOnField: number;

  /**
   * list of due times for each active yellow card (in seconds)
   *
   * @generated from field: repeated float yellow_cards_due = 8;
   */
  yellowCardsDue: number[];

  /**
   * if true, team is allowed to substitute robots
   *
   * @generated from field: optional bool can_substitute_robot = 11;
   */
  canSubstituteRobot: boolean;

  /**
   * number of bot substitutions left by the team in this halftime
   *
   * @generated from field: optional uint32 bot_substitutions_left = 13;
   */
  botSubstitutionsLeft: number;

  /**
   * number of seconds left for current bot substitution
   *
   * @generated from field: optional float bot_substitution_time_left = 14;
   */
  botSubstitutionTimeLeft: number;
};

/**
 * Describes the message RemoteControlTeamState.
 * Use `create(RemoteControlTeamStateSchema)` to create a new message.
 */
export const RemoteControlTeamStateSchema: GenMessage<RemoteControlTeamState> = /*@__PURE__*/
  messageDesc(file_ssl_gc_rcon_remotecontrol, 3);

/**
 * All possible request types that the remote control can make
 *
 * @generated from enum RemoteControlRequestType
 */
export enum RemoteControlRequestType {
  /**
   * @generated from enum value: UNKNOWN_REQUEST_TYPE = 0;
   */
  UNKNOWN_REQUEST_TYPE = 0,

  /**
   * @generated from enum value: EMERGENCY_STOP = 1;
   */
  EMERGENCY_STOP = 1,

  /**
   * @generated from enum value: ROBOT_SUBSTITUTION = 2;
   */
  ROBOT_SUBSTITUTION = 2,

  /**
   * @generated from enum value: TIMEOUT = 3;
   */
  TIMEOUT = 3,

  /**
   * @generated from enum value: CHALLENGE_FLAG = 4;
   */
  CHALLENGE_FLAG = 4,

  /**
   * @generated from enum value: CHANGE_KEEPER_ID = 5;
   */
  CHANGE_KEEPER_ID = 5,

  /**
   * @generated from enum value: STOP_TIMEOUT = 6;
   */
  STOP_TIMEOUT = 6,

  /**
   * @generated from enum value: FAIL_BALLPLACEMENT = 7;
   */
  FAIL_BALLPLACEMENT = 7,
}

/**
 * Describes the enum RemoteControlRequestType.
 */
export const RemoteControlRequestTypeSchema: GenEnum<RemoteControlRequestType> = /*@__PURE__*/
  enumDesc(file_ssl_gc_rcon_remotecontrol, 0);

