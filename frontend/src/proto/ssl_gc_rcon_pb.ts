// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file ssl_gc_rcon.proto (syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file ssl_gc_rcon.proto.
 */
export const file_ssl_gc_rcon: GenFile = /*@__PURE__*/
  fileDesc("ChFzc2xfZ2NfcmNvbi5wcm90byKhAgoPQ29udHJvbGxlclJlcGx5EjAKC3N0YXR1c19jb2RlGAEgASgOMhsuQ29udHJvbGxlclJlcGx5LlN0YXR1c0NvZGUSDgoGcmVhc29uGAIgASgJEhIKCm5leHRfdG9rZW4YAyABKAkSMwoMdmVyaWZpY2F0aW9uGAQgASgOMh0uQ29udHJvbGxlclJlcGx5LlZlcmlmaWNhdGlvbiI7CgpTdGF0dXNDb2RlEhcKE1VOS05PV05fU1RBVFVTX0NPREUQABIGCgJPSxABEgwKCFJFSkVDVEVEEAIiRgoMVmVyaWZpY2F0aW9uEhgKFFVOS05PV05fVkVSSUZJQ0FUSU9OEAASDAoIVkVSSUZJRUQQARIOCgpVTlZFUklGSUVEEAIiLAoJU2lnbmF0dXJlEg0KBXRva2VuGAEgAigJEhAKCHBrY3MxdjE1GAIgAigMQktCDlNzbEdjUmNvblByb3RvUAFaN2dpdGh1Yi5jb20vUm9ib0N1cC1TU0wvc3NsLXJlbW90ZS1jb250cm9sL2ludGVybmFsL3Jjb24");

/**
 * a reply that is sent by the controller for each request from teams or autoRefs
 *
 * @generated from message ControllerReply
 */
export type ControllerReply = Message<"ControllerReply"> & {
  /**
   * status_code is an optional code that indicates the result of the last request
   *
   * @generated from field: optional ControllerReply.StatusCode status_code = 1;
   */
  statusCode: ControllerReply_StatusCode;

  /**
   * reason is an optional explanation of the status code
   *
   * @generated from field: optional string reason = 2;
   */
  reason: string;

  /**
   * next_token must be send with the next request, if secure communication is used
   * the token is used to avoid replay attacks
   * the token is always present in the very first message before the registration starts
   * the token is not present, if secure communication is not used
   *
   * @generated from field: optional string next_token = 3;
   */
  nextToken: string;

  /**
   * verification indicates if the last request could be verified (secure communication)
   *
   * @generated from field: optional ControllerReply.Verification verification = 4;
   */
  verification: ControllerReply_Verification;
};

/**
 * Describes the message ControllerReply.
 * Use `create(ControllerReplySchema)` to create a new message.
 */
export const ControllerReplySchema: GenMessage<ControllerReply> = /*@__PURE__*/
  messageDesc(file_ssl_gc_rcon, 0);

/**
 * @generated from enum ControllerReply.StatusCode
 */
export enum ControllerReply_StatusCode {
  /**
   * @generated from enum value: UNKNOWN_STATUS_CODE = 0;
   */
  UNKNOWN_STATUS_CODE = 0,

  /**
   * @generated from enum value: OK = 1;
   */
  OK = 1,

  /**
   * @generated from enum value: REJECTED = 2;
   */
  REJECTED = 2,
}

/**
 * Describes the enum ControllerReply.StatusCode.
 */
export const ControllerReply_StatusCodeSchema: GenEnum<ControllerReply_StatusCode> = /*@__PURE__*/
  enumDesc(file_ssl_gc_rcon, 0, 0);

/**
 * @generated from enum ControllerReply.Verification
 */
export enum ControllerReply_Verification {
  /**
   * @generated from enum value: UNKNOWN_VERIFICATION = 0;
   */
  UNKNOWN_VERIFICATION = 0,

  /**
   * @generated from enum value: VERIFIED = 1;
   */
  VERIFIED = 1,

  /**
   * @generated from enum value: UNVERIFIED = 2;
   */
  UNVERIFIED = 2,
}

/**
 * Describes the enum ControllerReply.Verification.
 */
export const ControllerReply_VerificationSchema: GenEnum<ControllerReply_Verification> = /*@__PURE__*/
  enumDesc(file_ssl_gc_rcon, 0, 1);

/**
 * Signature can be added to a request to let it be verfied by the controller
 *
 * @generated from message Signature
 */
export type Signature = Message<"Signature"> & {
  /**
   * the token that was received with the last controller reply
   *
   * @generated from field: required string token = 1;
   */
  token: string;

  /**
   * the PKCS1v15 signature of this message
   *
   * @generated from field: required bytes pkcs1v15 = 2;
   */
  pkcs1v15: Uint8Array;
};

/**
 * Describes the message Signature.
 * Use `create(SignatureSchema)` to create a new message.
 */
export const SignatureSchema: GenMessage<Signature> = /*@__PURE__*/
  messageDesc(file_ssl_gc_rcon, 1);

